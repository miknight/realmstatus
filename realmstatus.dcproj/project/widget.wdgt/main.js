/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

function getRegion()
{
    return widget.preferenceForKey(dashcode.createInstancePreferenceKey("region"));
}

function getRealm()
{
    return widget.preferenceForKey(dashcode.createInstancePreferenceKey("realm"));
}

function getRealmList()
{
    return Realms;
}

function haveRealmsLoaded()
{
    return getRealmList().length > 0;
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    var default_region = "US";
    var default_realm = "Nagrand";
    if (!getRegion()) {
        widget.setPreferenceForKey(default_region, dashcode.createInstancePreferenceKey("region"));
    }
    if (!getRealm()) {
        widget.setPreferenceForKey(default_realm, dashcode.createInstancePreferenceKey("realm"));
    }
    Realms = [];
    AutoRefresh = null;
    $('#up').hide();
    $('#down').hide();
    $('#loading').hide();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("region"));
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("realm"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
    
    if (!haveRealmsLoaded()) {
        loadRealmStatus();
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    savePreferences();

    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }

    loadRealmStatus();
}

function savePreferences()
{
    var region = $("#region").val();
    var realm = $("#realm").val();
    widget.setPreferenceForKey(region, dashcode.createInstancePreferenceKey("region"));
    widget.setPreferenceForKey(realm, dashcode.createInstancePreferenceKey("realm"));
    $("#status_text").text(getRealm() + " (" + getRegion() + ")");
}

function loadRealmStatus()
{
    var url = "http://" + getRegion() + ".battle.net/wow/en/status";
    var realms = [];
    $('#up').hide();
    $('#down').hide();
    $('#loading').show();
    $.get(url, function(data) {
        $(data).find('#all-realms tbody tr[class!="no-results"]').each(function() {
            var tr = $(this);
            var realm = $.trim($('td.name', tr).text());
            var status = $.trim($('td.status', tr).attr('data-raw'));
            //alert(realm + ": " + status);
            realms.push({"name": realm, "status": status});
        });
        //alert(realms[0].name + ": " + realms[0].status);
        // Sort results.
        realms.sort(function(a, b) {
           var compA = a.name;
           var compB = b.name;
           return (compA < compB) ? -1 : (compA > compB) ? 1 : 0;
        })
        Realms = realms;
        alert("Loaded " + Realms.length + " realms.");
        $('#loading').hide();
        updateDisplay();
        // Refresh every 5 minutes.
        clearTimeout(AutoRefresh);
        AutoRefresh = setTimeout('loadRealmStatus();', 300 * 1000);
    });
}

function updateDisplay()
{
    var realm_list = getRealmList();
    if (realm_list && haveRealmsLoaded()) {
        // Remove all options before rebuild.
        $("#realm option").remove();
        $.each(realm_list, function(index, value) {
            // Populate the list.
            //alert(value.name);
            var new_option = $('<option></option>').val(value.name).html(value.name);
            if (value.name == getRealm()) {
                $(new_option).attr('selected', 'selected');
                alert(value.name + ": " + value.status);
                if (value.status == "up") {
                    $('#up').show();
                } else {
                    $('#down').show();
                }
            }
            $("#realm").append(new_option);
        });
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
